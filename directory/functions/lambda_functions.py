''' wa lambda function to check weather a given number is even or not '''


even = lambda num: num % 2 == 0


print(even(4))

'''walf that multiplies two numbers '''


product = lambda num1, num2: num1 * num2


print(product(5, 5))

''' walf that returns last element of the sequence '''


last = lambda seq: seq[-1]


print(last('Hello is it me you lookin for ?'))
print(last(['tu', 'tu', 'tu', 'tu', 'meri', 'mai', 'tera', 'honelaga']))

''' walf that checks if the given string is pallindrome or not '''


pallindrome = lambda string: f'{string} is a pallindrome' if string == string[::-1] else ' not pallindrome '


print(pallindrome('dad'))

''' walf to check if a num is even or odd '''

even_odd = lambda num: f'{num} is even' if num % 2 == 0 else f'{num} is odd'

print(even_odd(10))

''' wap that checks if the given list of numbers are even or odd '''

l = [1,2,3,4,5,6,7,8,9,10,11,12,13]

res = map(even_odd, l)
print(list(res))

''' wap to return the strings which are starting with vowels '''

vow = lambda string: f'{string}' if string[0] in 'aeiouAEIOU' else None
print(vow('helo'))

s = 'Hello is it me you lookin for ?'
l1 = s.split()
l2 = ['tu', 'tu', 'tu', 'tu', 'meri', 'mai', 'tera', 'honelaga']
print(list(map(vow, l1)))
print(list(map(vow, l2)))


''' wap to convert all the strings in the list to uppercase using map '''

l = ['apple', 'eat', 'day', 'every','says', 'doctor']

l2 = [i.upper() if isinstance(i, str) else i for i in l]
print(l2)

''' wap to convert all the negative numbers in the list to positive map '''


''' wap that returns the list of numbers raised to the power of their indices using map '''

''' wap that returns all the words in lower case in the give n sentence '''















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































